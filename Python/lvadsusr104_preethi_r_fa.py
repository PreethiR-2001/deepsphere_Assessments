# -*- coding: utf-8 -*-
"""LVADSUSR104-Preethi R-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dqUeyskTrSEaceapx8yFHR_YT0mzZ11Y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#1
file1 = pd.read_csv('/content/Walmart_Dataset Python_Final_Assessment.csv')
df = pd.DataFrame(file1)
row, col = df.shape
print("Number of rows in given data:", row)
print("\nNumber of columns in given data:", col)

col_type = df.dtypes
print("\nTypes of Data\n",col_type)

desc = df.describe()
print("\nDescription of the given data")
print(desc)

data_na = df.isna().sum()
print("\nIs there NaN values in any columns:\n",data_na)

#2
Data_NaN = df.isna().sum()
print(Data_NaN)

print("SO THERE IS NO NAN VALUES IN THE GIVEN DATA")

df.fillna(0, inplace=True) #if the data has nan values we can fill them will 0

newdf = df.drop_duplicates(inplace = True)
print("\nIs there any duplicates available: ",newdf)

#3
print("Overall statistics of given data:\n")
print(df.describe())

#using functions

sales_mean = df['Sales'].mean()
sales_median = df['Sales'].median()
sales_mode = df['Sales'].mode()
sales_var = df['Sales'].var()
sales_std = df['Sales'].std()
print("\n\nFor Sales column:\n")
print('Mean :', sales_mean, '\nMedian :', sales_median, '\nMode :', sales_mode,
      '\nVariance :', sales_var, '\nStandard Deviation:', sales_std)

quantity_mean = df['Quantity'].mean()
quantity_median = df['Quantity'].median()
quantity_mode = df['Quantity'].mode()
quantity_var = df['Quantity'].var()
quantity_std = df['Quantity'].std()
print("\n\nFor Quantity column:\n")
print('Mean :', quantity_mean, '\nMedian :', quantity_median, '\nMode :', quantity_mode,
      '\nVariance :', quantity_var, '\nStandard Deviation:', quantity_std)


profit_mean = df['Profit'].mean()
profit_median = df['Profit'].median()
profit_mode = df['Profit'].mode()
profit_var = df['Profit'].var()
profit_std = df['Profit'].std()
print("\n\nFor Profit column:\n")
print('Mean :', profit_mean, '\nMedian :', profit_median, '\nMode :', profit_mode,
      '\nVariance :', profit_var, '\nStandard Deviation:', profit_std)

#4
#bar chart
grouped = df.groupby('Geography')['Sales'].sum().reset_index().rename(columns={'Sales':'Sum of Sales'})
first10_grouped = grouped[:10]
x = first10_grouped['Geography']
y = first10_grouped['Sum of Sales']
plt.figure(figsize=(10,6))
plt.bar(x,y)
plt.xticks(rotation=90)
plt.xlabel('Geography')
plt.ylabel('Sum of Sales')
plt.title("Sum of sales over 10 places")
plt.show()

#4
#pie chart
grouped2 = df.groupby('Category')['Profit'].max().reset_index().rename(columns={'Profit':'Maximum Profit'})

sorted_df = grouped2.sort_values(by ='Maximum Profit', ascending = False)
top5 = sorted_df[:5]
plt.figure(figsize=(10,6))
plt.pie(top5['Maximum Profit'], labels = top5['Category'], autopct='%1.2f%%')
plt.title("Top 5 categories with maximum profit")
plt.legend(loc = 'upper right')
plt.show()

#4


filtered = df[df['Category'] == 'Phones']
grouped3 = filtered.groupby('Geography')['Quantity'].sum().reset_index().rename(columns={'Quantity':'Overall Quantity'})
sliced = grouped3[:15]

x = sliced['Geography']
y= sliced['Overall Quantity']
plt.figure(figsize=(10,6))
plt.plot(x, y)
plt.xticks(rotation=90)
plt.grid(True)
plt.xlabel('Geography')
plt.ylabel('Overall quantity')
plt.title("Overall quantity sold in different areas")
plt.show()

#5
grouped4 = df.groupby('Geography')['Sales'].sum().reset_index().rename(columns={'Sales':'Sum of Sales'})
first10_grouped = grouped4[:10]
first10_grouped.set_index('Geography', inplace =True)
sns.heatmap(first10_grouped, annot = True, fmt='.2f')
plt.show()

#6

grouped5 = filtered.groupby('Geography')['Sales'].sum().reset_index().rename(columns={'Sales':'Sum of Sales'})
x= grouped5['Geography']
y=grouped5['Sum of Sales']
plt.boxplot(column=x, by = y, grid=True)
plt.xlabel('Geography')
plt.ylabel('Sum of Sales')
plt.show()

#7.1.1
import datetime
df['Order Date'] = pd.to_datetime(df['Order Date'])
d = df['Order Date'].values()
a = df['Profit'].values
b = df['Sales'].values
plt.figure(figsize=(12,10))
plt.plot(d,b)
plt.plot(d, a)
plt.show()

#7.1.2

grouped2 = df.groupby('Category')['Profit'].sum().reset_index().rename(columns={'Profit':'Total Profit'})

sorted_df = grouped2.sort_values(by ='Total Profit', ascending = False)
top5 = sorted_df[:5]
plt.figure(figsize=(12,10))
plt.pie(top5['Total Profit'], labels = top5['Category'], autopct='%1.2f%%')
plt.title("Top 5 categories with Total profit")

plt.legend(loc = 'lower right')
plt.show()

#7.2.1
grouped7 = df.groupby('EmailID')['Order ID'].count().reset_index().rename(columns={'Order ID':'Count'})
sorted = grouped7.sort_values(by='Count', ascending = False)
top5 = sorted[:5]
x=top5['EmailID']
y=top5['Count']

plt.bar(x, y)
plt.xlabel('Customer')
plt.ylabel('Count of orders')
plt.xticks(rotation=90)
plt.title("Top 5 customers based on high orders")
plt.grid(True)
plt.show()

#7.2.1
grouped7 = df.groupby('EmailID')['Sales'].sum().reset_index().rename(columns={'Sales':'Total Sales'})
sorted = grouped7.sort_values(by='Total Sales', ascending = False)
top5 = sorted[:5]
x=top5['EmailID']
y=top5['Total Sales']

plt.bar(x, y)
plt.xlabel('Customer')
plt.ylabel('Total Sales')
plt.xticks(rotation=90)
plt.title("Top 5 customers based on high sales")
plt.grid(True)
plt.show()

print("by comparing both graphs,we can know high orders doesn't mean the sales is also high")